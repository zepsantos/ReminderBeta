package com.example.josep.reminderbeta.Settings;import android.content.DialogInterface;import android.os.Bundle;import android.preference.Preference;import android.support.annotation.Nullable;import android.support.v7.app.AlertDialog;import android.text.InputType;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.EditText;import com.example.josep.reminderbeta.Main;import com.example.josep.reminderbeta.R;import com.github.machinarius.preferencefragment.PreferenceFragment;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import java.util.HashMap;import java.util.Map;public class GroupManage extends PreferenceFragment {    private Preference LeaveGroup;    private Preference Group;    private DatabaseReference mDatabase;    private DatabaseReference mDatchild;    private DatabaseReference mDatGroup;    private FirebaseAuth mAuth;    private String GroupUpdated;    private Main main;    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        addPreferencesFromResource(R.xml.groupsettings);    }	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,	                         Bundle savedInstanceState) {        mDatabase = FirebaseDatabase.getInstance().getReference();        mAuth = FirebaseAuth.getInstance();        Group = getPreferenceManager().findPreference("Group");        LeaveGroup = getPreferenceManager().findPreference("LeaveGroup");        CheckGroup();        LeaveGroupFunction();        return super.onCreateView(inflater, container, savedInstanceState);    }	@Override	public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {		super.onViewCreated(view, savedInstanceState);    }    private void CheckGroup() {        if (Main.Group != null) {            Group.setSummary(Main.Group);        } else {            CreateGroup();        }    }    private void CreateGroup() {        LeaveGroup.setEnabled(false);        Group.setSummary(R.string.ClicktoCreateGroup);        Group.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {            public boolean onPreferenceClick(Preference preference) {                AlertDialog.Builder builder = new AlertDialog.Builder(getContext());                builder.setTitle("Group Name:");                final EditText input = new EditText(getContext());                input.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_NORMAL | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);                builder.setView(input);                builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        String mText = input.getText().toString();                        String upperString = mText.substring(0, 1).toUpperCase() + mText.substring(1);                        if (mAuth.getCurrentUser() != null) {                            Map<String, Object> childUpdates = new HashMap<>();                            childUpdates.put("/groups/" + upperString + "/name/", upperString);                            childUpdates.put("/users/" + mAuth.getCurrentUser().getUid() + "/group/", upperString);                            mDatabase.updateChildren(childUpdates);                            hasGroup();                        }                    }                });                builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        dialog.cancel();                    }                });                builder.show();                return false;            }        });    }    private void LeaveGroupFunction() {        LeaveGroup.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {            @Override            public boolean onPreferenceClick(Preference preference) {                AlertDialog.Builder builder = new AlertDialog.Builder(getContext());                builder.setTitle(R.string.LeaveGroup);                builder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        if (mAuth.getCurrentUser() != null) {                            mDatGroup = mDatabase.child("users").child(mAuth.getCurrentUser().getUid()).child("group");                            mDatGroup.removeValue(new DatabaseReference.CompletionListener() {                                @Override                                public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {                                    LeaveGroup.setEnabled(false);                                    CreateGroup();                                    hasGroup();                                }                            });                        }                    }                });                builder.setNegativeButton("No", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        dialog.cancel();                    }                });                builder.show();                return false;            }        });    }    private void hasGroup() {        mAuth = FirebaseAuth.getInstance();        if (mAuth.getCurrentUser() != null) {            mDatchild = mDatabase.child("users").child(mAuth.getCurrentUser().getUid()).child("group");            mDatchild.addValueEventListener(new ValueEventListener() {                @Override                public void onDataChange(DataSnapshot dataSnapshot) {                    GroupUpdated = dataSnapshot.getValue(String.class);                    Group.setSummary(GroupUpdated);                    LeaveGroup.setEnabled(true);                    if (GroupUpdated == null) {                        Group.setSummary(R.string.ClicktoCreateGroup);                        LeaveGroup.setEnabled(false);                    }                }                @Override                public void onCancelled(DatabaseError databaseError) {                }            });        }    }}