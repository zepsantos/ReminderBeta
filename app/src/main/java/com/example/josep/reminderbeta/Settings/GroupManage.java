package com.example.josep.reminderbeta.Settings;import android.app.Dialog;import android.content.DialogInterface;import android.os.Bundle;import android.preference.Preference;import android.support.annotation.Nullable;import android.support.design.widget.FloatingActionButton;import android.support.v7.app.AlertDialog;import android.support.v7.widget.DefaultItemAnimator;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.text.InputType;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.EditText;import android.widget.ImageView;import android.widget.Toast;import com.example.josep.reminderbeta.Adapters.MembersAdapter;import com.example.josep.reminderbeta.Decorator.DividerItemDecoration;import com.example.josep.reminderbeta.Main;import com.example.josep.reminderbeta.Models.GroupMember;import com.example.josep.reminderbeta.R;import com.github.machinarius.preferencefragment.PreferenceFragment;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class GroupManage extends PreferenceFragment {    private Preference LeaveGroup;    private Preference Group;    private Preference Members;    private DatabaseReference mDatabase;    private DatabaseReference mDatchild;    private DatabaseReference mDatGroup;    private FirebaseAuth mAuth;    private String GroupUpdated;    private DatabaseReference mDatGroups;    private List<GroupMember> memberslist = new ArrayList<>();    private RecyclerView recyclerView;    private MembersAdapter mAdapter;    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        addPreferencesFromResource(R.xml.groupsettings);    }	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,	                         Bundle savedInstanceState) {        mDatabase = FirebaseDatabase.getInstance().getReference();        mAuth = FirebaseAuth.getInstance();        Group = getPreferenceManager().findPreference("Group");        Members = getPreferenceManager().findPreference("Members");        LeaveGroup = getPreferenceManager().findPreference("LeaveGroup");        CheckGroup();        LeaveGroupFunction();        return super.onCreateView(inflater, container, savedInstanceState);    }	@Override	public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {		super.onViewCreated(view, savedInstanceState);    }    private void CheckGroup() {        if (Main.Group != null) {            hasGroup();            Group.setSummary(Main.Group);            MembersList();        } else {            CreateGroup();	        InvitesAvailable();        }    }	private void InvitesAvailable() {		Members.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {			@Override			public boolean onPreferenceClick(Preference preference) {								return false;			}		});	}	private void MembersList() {		Members.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {            @Override            public boolean onPreferenceClick(Preference preference) {                Dialog dialog = new Dialog(getContext(), android.R.style.Theme_DeviceDefault_Light_NoActionBar);                dialog.setContentView(R.layout.fragment_members);                FloatingActionButton fab = (FloatingActionButton) dialog.findViewById(R.id.fabaddtogroup);                fab.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View view) {                        invitetogroup();                    }                });                ImageView Backbutton = (ImageView) dialog.findViewById(R.id.returnbutton);                Backbutton.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View view) {                    }                });                recyclerView = (RecyclerView) dialog.findViewById(R.id.membersview);                mAdapter = new MembersAdapter(memberslist);                RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getContext());                recyclerView.setLayoutManager(mLayoutManager);                recyclerView.setItemAnimator(new DefaultItemAnimator());                recyclerView.addItemDecoration(new DividerItemDecoration(getContext(), LinearLayoutManager.VERTICAL));                recyclerView.setAdapter(mAdapter);                getMembers();                dialog.show();                return false;            }        });    }    private void invitetogroup() {        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());        builder.setTitle("Invite to group:");        final EditText input = new EditText(getContext());	    input.setInputType(InputType.TYPE_CLASS_TEXT);	    builder.setView(input, 50, 10, 50, 10);        builder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialogInterface, int i) {                if (input.getText() != null) {                    invitesystem(input.getText().toString());                }            }        });        builder.setNegativeButton("No", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialogInterface, int i) {                dialogInterface.dismiss();            }        });        builder.show();    }    private void invitesystem(String str) {	    DatabaseReference groupusername = mDatabase.child("username").child(str);	    groupusername.addListenerForSingleValueEvent(new ValueEventListener() {		    @Override		    public void onDataChange(DataSnapshot dataSnapshot) {			    if (dataSnapshot.exists()) {				    String uid = dataSnapshot.getValue(String.class);				    Map<String, Object> childUpdates = new HashMap<>();				    childUpdates.put("/group-invites/" + uid, GroupUpdated);				    mDatabase.updateChildren(childUpdates);				    Log.d("UID", uid);			    } else {				    //ERROR ----> FAZER O ERRO			    }		    }		    @Override		    public void onCancelled(DatabaseError databaseError) {		    }	    });    }    private void getMembers() {        DatabaseReference DatMembers = mDatabase.child("groups").child(GroupUpdated).child("members");        DatMembers.addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(DataSnapshot dataSnapshot) {                memberslist.clear();                List<String> lst = new ArrayList<>(); // Result will be holded Here                Map<String, String> map = new HashMap<String, String>();                for (DataSnapshot dsp : dataSnapshot.getChildren()) {                    lst.add(String.valueOf(dsp.getKey())); //add result into array list                    GroupMember groupMember = new GroupMember(dsp.getValue().toString());                    memberslist.add(groupMember);                    mAdapter.notifyDataSetChanged();                }                for (String data : lst) {                    //UID                }            }            @Override            public void onCancelled(DatabaseError databaseError) {            }        });    }    private void CreateGroup() {        Members.setTitle("Invites to group");        LeaveGroup.setEnabled(false);        Group.setSummary(R.string.ClicktoCreateGroup);        Group.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {            public boolean onPreferenceClick(final Preference preference) {                AlertDialog.Builder builder = new AlertDialog.Builder(getContext());                builder.setTitle("Group Name:");                final EditText input = new EditText(getContext());                input.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_NORMAL | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);                builder.setView(input, 50, 10, 50, 10);                builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(final DialogInterface dialog, int which) {                        String mText = input.getText().toString();                        final String upperString = mText.substring(0, 1).toUpperCase() + mText.substring(1);                        mDatGroups = mDatabase.child("groups").child(upperString);                        mDatGroups.addListenerForSingleValueEvent(new ValueEventListener() {                            @Override                            public void onDataChange(DataSnapshot dataSnapshot) {                                if (dataSnapshot.exists()) {                                    dialog.cancel();                                    Toast toast = Toast.makeText(getContext(), "Group name isn't available", Toast.LENGTH_LONG);                                    toast.show();                                } else {                                    if (mAuth.getCurrentUser() != null) {                                        Map<String, Object> childUpdates = new HashMap<>();                                        String useruid = mAuth.getCurrentUser().getUid();                                        childUpdates.put("/groups/" + upperString + "/owner/", useruid);                                        childUpdates.put("/groups/" + upperString + "/members/" + useruid, "true");                                        childUpdates.put("/groups/" + upperString + "/name/", upperString);                                        childUpdates.put("/users/" + useruid + "/group/", upperString);                                        mDatabase.updateChildren(childUpdates);                                        hasGroup();                                        Group.setOnPreferenceClickListener(null);                                    }                                }                            }                            @Override                            public void onCancelled(DatabaseError databaseError) {                            }                        });                        }                });                builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        dialog.cancel();                    }                });                builder.show();                return false;            }        });    }    private void LeaveGroupFunction() {        LeaveGroup.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {            @Override            public boolean onPreferenceClick(Preference preference) {                AlertDialog.Builder builder = new AlertDialog.Builder(getContext());                builder.setTitle(R.string.LeaveGroup);                builder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        if (mAuth.getCurrentUser() != null) {                            mDatGroup = mDatabase.child("users").child(mAuth.getCurrentUser().getUid()).child("group");                            mDatGroup.removeValue(new DatabaseReference.CompletionListener() {                                @Override                                public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {                                    LeaveGroup.setEnabled(false);                                    CreateGroup();                                    hasGroup();                                }                            });                        }                    }                });                builder.setNegativeButton("No", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        dialog.cancel();                    }                });                builder.show();                return false;            }        });    }    private void hasGroup() {        mAuth = FirebaseAuth.getInstance();        if (mAuth.getCurrentUser() != null) {            mDatchild = mDatabase.child("users").child(mAuth.getCurrentUser().getUid()).child("group");            mDatchild.addValueEventListener(new ValueEventListener() {                @Override                public void onDataChange(DataSnapshot dataSnapshot) {                    GroupUpdated = dataSnapshot.getValue(String.class);                    Group.setSummary(GroupUpdated);                    LeaveGroup.setEnabled(true);                    if (GroupUpdated == null) {                        Group.setSummary(R.string.ClicktoCreateGroup);                        LeaveGroup.setEnabled(false);                    } else {                        Members.setTitle(R.string.InviteGroup);                    }                }                @Override                public void onCancelled(DatabaseError databaseError) {                }            });        }    }}