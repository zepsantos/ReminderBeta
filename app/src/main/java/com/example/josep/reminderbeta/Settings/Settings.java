package com.example.josep.reminderbeta.Settings;import android.content.DialogInterface;import android.content.Intent;import android.os.Bundle;import android.preference.Preference;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v7.app.AlertDialog;import android.text.InputType;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.EditText;import android.widget.Toast;import com.example.josep.reminderbeta.InitApp;import com.example.josep.reminderbeta.Main;import com.example.josep.reminderbeta.R;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.Task;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;public class Settings extends com.github.machinarius.preferencefragment.PreferenceFragment {    public static String mName;    private DatabaseReference mDatabase;    private DatabaseReference mDatchild;    private FirebaseAuth mAuth;    private Preference Name;    private Preference LogOut;    private Preference Changepassword;    private Preference Group;    private Preference Email;    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        addPreferencesFromResource(R.xml.settings);    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        mDatabase = FirebaseDatabase.getInstance().getReference();        mAuth = FirebaseAuth.getInstance();        Name = getPreferenceManager().findPreference("Name");        Email = getPreferenceManager().findPreference("Email");        Group = getPreferenceManager().findPreference("Group");        LogOut = getPreferenceManager().findPreference("LogOut");        Changepassword = getPreferenceManager().findPreference("ChangePassword");        PasswordDialog();        LogOutFunction();        GroupFragment();        getAccountDetails();        GroupManagement();        return super.onCreateView(inflater, container, savedInstanceState);    }    private void PasswordDialog() {        Changepassword.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {            @Override            public boolean onPreferenceClick(Preference preference) {                AlertDialog.Builder builder = new AlertDialog.Builder(getContext());                builder.setTitle("Change Password:");                final EditText input = new EditText(getContext());                input.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);                builder.setView(input, 50, 10, 50, 10);                builder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());                        builder.setTitle(R.string.ChangePassMessage);                        builder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                ChangePasswordFunction(input);                            }                        });                        builder.setNegativeButton("No", new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialogInterface, int i) {                                dialogInterface.cancel();                            }                        });                        builder.show();                    }                });                builder.setNegativeButton("No", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        dialog.cancel();                    }                });                builder.show();                return false;            }        });    }    private void ChangePasswordFunction(EditText pass) {        mAuth = FirebaseAuth.getInstance();        if (mAuth != null) {            FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();            user.updatePassword(pass.getText().toString().trim())                    .addOnCompleteListener(new OnCompleteListener<Void>() {                        @Override                        public void onComplete(@NonNull Task<Void> task) {                            if (task.isSuccessful()) {                                signout();                            } else {                                if (getView() != null) {                                    Toast t = Toast.makeText(getContext(), "Password Unsucessufuly changed", Toast.LENGTH_LONG);                                    t.show();                                }                            }                        }                    });        }    }    private void LogOutFunction() {        LogOut.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {            @Override            public boolean onPreferenceClick(Preference preference) {                AlertDialog.Builder builder = new AlertDialog.Builder(getContext());                builder.setTitle(R.string.LogOutMessage);                builder.setPositiveButton("YES", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        signout();                    }                });                builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        dialog.cancel();                    }                });                builder.show();                return false;            }        });    }    private void GroupFragment() {        Group.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {            @Override            public boolean onPreferenceClick(Preference preference) {                GroupManage fragment = new GroupManage();                getFragmentManager()                        .beginTransaction()                        .replace(R.id.mainframe, fragment)                        .addToBackStack(null)                        .commit();                return false;            }        });    }    @Override    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);    }    private void GroupManagement() {        if (Main.Group != null) Group.setSummary(Main.Group);    }    private void getAccountDetails() {        mAuth = FirebaseAuth.getInstance();        if (mAuth.getCurrentUser() != null) {            String UserEmail = mAuth.getCurrentUser().getEmail();            Email.setSummary(UserEmail);            mDatchild = mDatabase.child("users").child(mAuth.getCurrentUser().getUid()).child("name");            mDatchild.addValueEventListener(new ValueEventListener() {                @Override                public void onDataChange(DataSnapshot dataSnapshot) {                    mName = dataSnapshot.getValue(String.class);                    Name.setSummary(mName);                }                @Override                public void onCancelled(DatabaseError databaseError) {                }            });        }    }    /*  private void hasGroup() {          mAuth = FirebaseAuth.getInstance();          if (mAuth.getCurrentUser() != null) {              mDatchild = mDatabase.child("users").child(mAuth.getCurrentUser().getUid()).child("Group");              mDatchild.addValueEventListener(new ValueEventListener() {                  @Override                  public void onDataChange (DataSnapshot dataSnapshot) {                        GroupUpdated = dataSnapshot.getValue(String.class);                      Group.setSummary(GroupUpdated);                      LeaveGroup.setEnabled(true);                      if(GroupUpdated == null) {                         Group.setSummary(R.string.ClicktoCreateGroup);                          LeaveGroup.setEnabled(false);                      }                  }                  @Override                  public void onCancelled(DatabaseError databaseError) {                  }              });          }      } */    private void signout() {        FirebaseAuth.getInstance().signOut();        Intent i = new Intent(getActivity(), InitApp.class);        startActivity(i);        getActivity().finish();    }}